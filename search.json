[{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/articles/NetworkExtinction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"How to use the NetworkExtinction Package","text":"objectives NetworkExtinction package analyse visualize topology ecological networks responses simulated extinction species. NetworkExtinction conceptualised trophic mutualistic ecological networks. network type needs declared functions R package NetworkType argument. main indexes used analyses : Number nodes: Total number species network (Dunne, Williams, Martinez 2002). Number links: Number trophic relationships represented food web (Dunne, Williams, Martinez 2002). Connectance: Proportion possible trophic links completed (Dunne, Williams, Martinez 2002). Primary removals: occurs researcher intentionally removes one species, simulating single extinction. Secondary extinctions: secondary extinction occurs non basal species loses prey items due removal another species. context, basal species can experience primary removal, secondary extinctions (Dunne, Williams, Martinez 2002). Total extinctions: sum primary removal secondary extinctions one simulation. package built total six functions. four functions analyze cascading effect extinctions food web, one function plot results extinction analysis, another analyse degree distribution network. Functions analyse cascading effect extinctions following: SimulateExtinctions: simulate extinctions connected species less connected network, customized order. RandomExtinctions: develop null hypothesis generating random orders simulated extinctions. CompareExtinctions: compare observed secondary extinctions expected secondary extinction generated random extinction. function plot results : ExtinctionPlot: plot results extinction functions function analyse degree distribution : DegreeDistribution: test degrees network follow power law, exponential.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/articles/NetworkExtinction.html","id":"how-to-install-the-package","dir":"Articles","previous_headings":"Introduction","what":"How to install the package","title":"How to use the NetworkExtinction Package","text":"package cran install.packages function can used install NetworkExtinction package shown following code. install recent","code":"install.packages(NetworkExtinction) library(NetworkExtinction) devtools::install_github(\"derek-corcoran-barrios/NetworkExtintion\")"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/articles/NetworkExtinction.html","id":"how-to-represent-a-food-web-in-r","dir":"Articles","previous_headings":"Introduction","what":"How to represent a food web in R","title":"How to use the NetworkExtinction Package","text":"first step make analysis NetworkExtinction package build representation food web. NetworkExtinction package accepts matrix, edgelist Network build network package (Butts et al. 2008). example build food web explain create network shown figure 1. network ten nodes node represents one species. , four nodes basal species (primary producers, sp.1 sp.4), three nodes intermediate (primary consumers, sp.5 sp.7), remaining three top predators (sp.8 sp.10). order build interaction matrix (Figure 2) represent food web, create square matrix column row representing species. Columns represent consumers rows resources, 1 represents trophic interaction 0 absence. Note columns, first four species zeros consumers. example, look species 7, feeds species 4 3. order represent , go column 7 put 1 rows 3 4. following code example build matrix figure 2 using R: matrix ready, use .network function network package build network object.","code":"a<- matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0),nrow=10, ncol=10)  a #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    1    0    0    0    0     0 #>  [2,]    0    0    0    0    0    1    0    0    0     1 #>  [3,]    0    0    0    0    0    0    1    0    0     0 #>  [4,]    0    0    0    0    0    0    1    0    0     0 #>  [5,]    0    0    0    0    0    0    0    1    0     0 #>  [6,]    0    0    0    0    0    0    0    1    1     0 #>  [7,]    0    0    0    0    0    0    0    0    0     1 #>  [8,]    0    0    0    0    0    0    0    0    0     1 #>  [9,]    0    0    0    0    0    0    0    0    0     0 #> [10,]    0    0    0    0    0    0    0    0    0     0 library(network) net <- as.network(a, loops = TRUE) net #>  Network attributes: #>   vertices = 10  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = TRUE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 10  #>     missing edges= 0  #>     non-missing edges= 10  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes"},{"path":[]},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/articles/NetworkExtinction.html","id":"extinctions-from-most-to-less-conected-species-in-the-network","dir":"Articles","previous_headings":"Functions > Extinctions functions","what":"Extinctions from most to less conected species in the network","title":"How to use the NetworkExtinction Package","text":"Mostconnected() function sorts species connected node least connected node, using total degree. , removes connected node network, simulating extinction, recalculates topological indexes network counts many species indegree 0 (secondary extinction), considering primary producers. , removes nodes secondarily extinct previous step recalculates node new connected species. step repeated number links network zero (Sole Montoya 2001; Dunne, Williams, Martinez 2002; Dunne Williams 2009). result function list contains dataframe shown table 1. first column called Spp indicates order species removed simulating extinction. column Secondary_extinctions represents numbers species become extinct given food items left food web, AccSecondaryExtinction column represents accumulated secondary extinctions. (plot results, see function ExtinctionPlot().) Figure 3. graph shows number accumulated secondary extinctions occur removing species least connected species addition, list returned SimulateExtinctions() also contains final Network remains primary extinctions finished:","code":"library(NetworkExtinction) data(\"net\") SimulateExtinctions(Network = net, Method = \"Mostconnected\") data(\"More_Connected\") history <- SimulateExtinctions(Network = net, Method = \"Mostconnected\") ExtinctionPlot(History = history[[1]], Variable = \"AccSecExt\")"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/articles/NetworkExtinction.html","id":"extinctions-using-a-customized-order","dir":"Articles","previous_headings":"Functions > Extinctions functions","what":"Extinctions using a customized order","title":"How to use the NetworkExtinction Package","text":"ExtinctionOrder() function takes network extinguishes nodes using customized order. , calculates topological network indexes secondary extinctions. toy network, nodes 1-4 primary producers nodes 9 10 represent apex predators. Let’s see happens sequentially remove apex predators: Already removal node 5, loose support species network. Figure 4. graph shows number accumulated secondary extinctions occur removing species custom order. results function dataframe topological indexes network calculated extinction step (Table 2), plot shows number accumulated secondary extinctions occurred removed node (Figure 4).","code":"data(\"net\") SimulateExtinctions(Network = net, Order = 1:8, Method = \"Ordered\")"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/articles/NetworkExtinction.html","id":"random-extinction","dir":"Articles","previous_headings":"Functions > Extinctions functions","what":"Random extinction","title":"How to use the NetworkExtinction Package","text":"RandomExtinctions() function generates n random extinction orders, determined argument nsim. first result function dataframe (table 3). SimNum argument, can control many nodes network simulated go extinct random extinction order. , choose number set custom order example . column NumExt represents number species removed, AccSecondaryExtinction average number secondary extinctions species removed, SdAccSecondaryExtinction standard deviation. second result graph (figure 5), x axis number species removed y axis number accumulated secondary extinctions. solid line average number secondary extinctions every simulated primary extinction, red area represents mean ±\\pm standard deviation simulations. Figure 5. resulting graph RandomExtinctions function","code":"data(net) set.seed(707) RandomExtinctions(Network= net, nsim= 100, SimNum = 8)"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/articles/NetworkExtinction.html","id":"comparison-of-null-hypothesis-with-other-extinction-histories","dir":"Articles","previous_headings":"Functions > Extinctions functions","what":"Comparison of Null hypothesis with other extinction histories","title":"How to use the NetworkExtinction Package","text":"RandomExtinctons() function generates null hypothesis us compare either extinction history generated ExtinctionOrder() function Mostconnected() function. order compare expected extinctions developed null hypothesis observed extinction history, developed CompareExtinctions() function. way use last function first create extinction history null hypothesis, CompareExtinctions() function compare extinction histories. result graph (Figue 6) dashed line showing observed extinction history solid line showing expected value secondary extinctions randomly generated. Figure 6. resulting graph CompareExtinctions function, dashed line shows observed extinction history, solid line shows expected value secondary extinctions originated random","code":"data(\"net\") Comparison <- CompareExtinctions(Nullmodel = Test, Hypothesis = Order)"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/articles/NetworkExtinction.html","id":"plotting-the-extinction-histories-of-a-network","dir":"Articles","previous_headings":"Functions","what":"Plotting the extinction histories of a network","title":"How to use the NetworkExtinction Package","text":"ExtinctionPlot() function takes NetworkTopology class object plots index interest every extinction. default, function plots number accumulated secondary extinctions every primary extinction (Figure 7), indexes can plotted function changing Variable argument (Figure 8). Figure 7. Example use ExtinctionPlot function showing accumulated secondary extinctions number extinctions Figure 8. Another example use ExtinctionPlot function showing number links per species number extinctions","code":"data(net) ExtinctionPlot(History = Order[[1]]) ExtinctionPlot(History = Order[[1]], Variable = \"Link_density\")"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/articles/NetworkExtinction.html","id":"degree-distribution-function","dir":"Articles","previous_headings":"Functions","what":"Degree distribution function","title":"How to use the NetworkExtinction Package","text":"DegreeDistribution() function calculates cumulative distribution number links species food network (Estrada 2007). , observed distribution fitted exponential, power law models. results function shown figure 9 table 4. graph shows observed degree distribution log log scale fitting three models mentioned , example use example dataset Chilean litoral rocky shores (Kéfi et al. 2015). table shows fitted model information ordered descending AIC, , model first row probable distribution, followed second finally third distribution case (Table 3), Exponential distribution best model, followed Power law model. Figure 9: Fitted vs observed values degree distribution. black line points show observed values, red, green blue lines show fitted values Exponential, power law trucated distribution, respectively Table 4: Model selection analysis main objective fitting cumulative distribution degrees models, determine vulnerability network removal connected species related degree distribution. Networks follow power law distribution vulnerable removal connected nodes, networks follow exponential degree distribution less vulnerable removal connected nodes (Albert Barabási 2002; Dunne, Williams, Martinez 2002; Estrada 2007; Santana et al. 2013).","code":"data(\"chilean_intertidal\") DegreeDistribution(chilean_intertidal)"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/articles/NetworkExtinction.html","id":"inter-network-dependendancy","dir":"Articles","previous_headings":"","what":"Inter-Network Dependendancy","title":"How to use the NetworkExtinction Package","text":"default, functions NetworkExtinction assume , secondary extinction happen, node needs loose connections prey (NetworkType == \"Trophic\") nodes (NetworkType == \"Mutualistic\"). One may also want assume species capable sustaining existence given threshold remaining interaction strengths. implemented argument, one can either set global node-dependency interaction strengths , alternatively, define value node supplied network. minimal example, let’s consider primary extinctions two producers toy network taking account interaction strength loss thresholds: Table 5: resulting dataframe basic version SimulateExtinctions can see, base version SimulateExtinctions(), obtain two secondary extinctions. Now, let’s consider species net need retain minimum 70% interaction strength go extinct (rather 0% default): Table 6: resulting dataframe interaction-strength loss version SimulateExtinctions can see, drastically changes many secondary extinctions estimate.","code":"IS_0 <- SimulateExtinctions(Network = net, Order = 1:2, Method = \"Ordered\")[[1]] IS_0.7 <- SimulateExtinctions(Network = net, Order = 1:2, Method = \"Ordered\", IS = 0.7)[[1]]"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/articles/NetworkExtinction.html","id":"rewiring-potential","dir":"Articles","previous_headings":"","what":"Rewiring Potential","title":"How to use the NetworkExtinction Package","text":"Ecological networks aren’t static assume species may shift connections response extinctions association/interaction partner. Rewiring processes can simulated NetworkExtinction using Rewiring, RewiringDist, RewiringProb arguments. Let’s start RewiringDist. matrix contains information similarities rewiring potential species indexed columns indexed rows. package comes example data set : random distance matrix. sake example, assume values represent probabilities rewiring. tweak bit make useful toy example trophic network, setting values 0: matrix makes lot sense purposes. clarify read data: species 8 (column) .663.663 chance rewiring species 2 (row). Next, Rewiring function argument , just like argument can set globally individually node. used calculate probabilities rewiring data RewiringDist. Since assume RewiringDist already contain probabilities example, simply set RewiringDist return data without changing : Lastly, RewiringProb called upon determine whether rewiring can happen among potential rewiring partners. potential rewiring partner comes probability higher threshold, rewiring happens. multiple potential partners meet threshold, rewiring happens potential partner highest probability. Let’s keep default 50% . Finally, let’s together example . Can reduce number secondary extinctions allowing rewiring? Table 7: resulting dataframe rewiring version SimulateExtinctions Indeed, made one less secondary extinction second primary extinction!","code":"data(dist) dist #>             1         2          3          4         5         6         7 #> 1  0.00000000 0.4593111 0.10593644 0.30189790 0.4705959 0.1783138 0.4530299 #> 2  0.45931109 0.0000000 0.56524753 0.76120899 0.8902942 0.5980121 0.8727282 #> 3  0.10593644 0.5652475 0.00000000 0.19596146 0.5765323 0.2842503 0.5589664 #> 4  0.30189790 0.7612090 0.19596146 0.00000000 0.7724938 0.4802117 0.7549278 #> 5  0.47059588 0.8902942 0.57653232 0.77249378 0.0000000 0.2922820 0.5669981 #> 6  0.17831383 0.5980121 0.28425027 0.48021173 0.2922820 0.0000000 0.2747161 #> 7  0.45302992 0.8727282 0.55896636 0.75492782 0.5669981 0.2747161 0.0000000 #> 8  0.20346538 0.6627765 0.09752893 0.09843253 0.6740613 0.3817792 0.6564953 #> 9  0.01647744 0.4428337 0.12241388 0.31837534 0.4870733 0.1947913 0.4695074 #> 10 0.54697008 0.4174089 0.44103364 0.63699510 0.5059987 0.7252839 1.0000000 #>             8          9        10 #> 1  0.20346538 0.01647744 0.5469701 #> 2  0.66277647 0.44283365 0.4174089 #> 3  0.09752893 0.12241388 0.4410336 #> 4  0.09843253 0.31837534 0.6369951 #> 5  0.67406125 0.48707331 0.5059987 #> 6  0.38177920 0.19479127 0.7252839 #> 7  0.65649529 0.46950735 1.0000000 #> 8  0.00000000 0.21994281 0.5385626 #> 9  0.21994281 0.00000000 0.5634475 #> 10 0.53856257 0.56344752 0.0000000 dist[,1:4] <- 0 # producers don't worry about rewiring dist[5:10,5:8] <- 0 # intermediate consumders can only rewire to producers dist[c(1:4, 9:10), 9:10] <- 0 # apex predators can only rewire to intermediate consumers dist #>    1 2 3 4         5         6         7          8         9        10 #> 1  0 0 0 0 0.4705959 0.1783138 0.4530299 0.20346538 0.0000000 0.0000000 #> 2  0 0 0 0 0.8902942 0.5980121 0.8727282 0.66277647 0.0000000 0.0000000 #> 3  0 0 0 0 0.5765323 0.2842503 0.5589664 0.09752893 0.0000000 0.0000000 #> 4  0 0 0 0 0.7724938 0.4802117 0.7549278 0.09843253 0.0000000 0.0000000 #> 5  0 0 0 0 0.0000000 0.0000000 0.0000000 0.00000000 0.4870733 0.5059987 #> 6  0 0 0 0 0.0000000 0.0000000 0.0000000 0.00000000 0.1947913 0.7252839 #> 7  0 0 0 0 0.0000000 0.0000000 0.0000000 0.00000000 0.4695074 1.0000000 #> 8  0 0 0 0 0.0000000 0.0000000 0.0000000 0.00000000 0.2199428 0.5385626 #> 9  0 0 0 0 0.0000000 0.0000000 0.0000000 0.00000000 0.0000000 0.0000000 #> 10 0 0 0 0 0.0000000 0.0000000 0.0000000 0.00000000 0.0000000 0.0000000 RewiringDist <- function(x){x} Rewiring <- SimulateExtinctions(Network = net, Order = 1:2, Method = \"Ordered\", IS = 0.7,                               Rewiring = function(x){x}, RewiringDist = dist, RewiringProb = 0.5)[[1]]"},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Derek Corcoran. Author, maintainer. M. Isidora Ávila-Thieme. Author. Fernanda S. Valdovinos. Author. Sergio . Navarrete. Author. Pablo . Marquet. Author. Erik Kusch. Author.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Corcoran D, Ávila-Thieme M, Valdovinos F, Navarrete S, Marquet P, Kusch E (2024). NetworkExtinction: Extinction Simulation Ecological Networks. R package version 1.0.3, https://derek-corcoran-barrios.github.io/NetworkExtinction/.","code":"@Manual{,   title = {NetworkExtinction: Extinction Simulation in Ecological Networks},   author = {Derek Corcoran and M. Isidora Ávila-Thieme and Fernanda S. Valdovinos and Sergio A. Navarrete and Pablo A. Marquet and Erik Kusch},   year = {2024},   note = {R package version 1.0.3},   url = {https://derek-corcoran-barrios.github.io/NetworkExtinction/}, }"},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"pkgdown-","dir":"","previous_headings":"","what":"pkgdown","title":"Extinction Simulation in Ecological Networks","text":"goal NetworkExtinction Simulate extinction species food web analyze cascading effects, described Dunne et al. (2002)","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extinction Simulation in Ecological Networks","text":"can install released version NetworkExtinction CRAN : development version GitHub :","code":"install.packages(\"NetworkExtinction\") # install.packages(\"devtools\") devtools::install_github(\"derek-corcoran-barrios/NetworkExtinction\")"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"network-encoding","dir":"","previous_headings":"","what":"Network Encoding","title":"Extinction Simulation in Ecological Networks","text":"Within NetworkExtinction, ecological networks recognized either adjacency matrices network objects. Furthermore, NetworkExtinction functions support binary (whether interaction present ) well weighted (importance interaction partners) network specifications. demonstration package front , use types. ensure network representations work well NetworkExtinction ensure match structure following objects.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"binary-networks","dir":"","previous_headings":"Network Encoding","what":"Binary Networks","title":"Extinction Simulation in Ecological Networks","text":"Binary networks simply denote whether two partners (.e., nodes) interact (link present) (link absent). Within matrix, presence absence encoded 1 0, respectively: express network matrix network object, simply run:","code":"set.seed(42) bin_mat <- matrix(   rbinom(n = 1e2, size = 1, prob = 0.5),   ncol = 10, nrow = 10) bin_mat #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1    0    1    1    0    0    1    0    1     1 #>  [2,]    1    1    0    1    0    0    1    0    0     0 #>  [3,]    0    1    1    0    0    0    1    0    0     0 #>  [4,]    1    0    1    1    1    1    1    0    1     1 #>  [5,]    1    0    0    0    0    0    1    0    1     1 #>  [6,]    1    1    1    1    1    1    0    1    1     1 #>  [7,]    1    1    0    0    1    1    0    0    0     0 #>  [8,]    0    0    1    0    1    0    1    0    0     1 #>  [9,]    1    0    0    1    1    0    1    1    0     1 #> [10,]    1    1    1    1    1    1    0    0    0     1 library(network) bin_net <- as.network(bin_mat) summary(bin_net) #> Network attributes: #>   vertices = 10 #>   directed = TRUE #>   hyper = FALSE #>   loops = FALSE #>   multiple = FALSE #>   bipartite = FALSE #>  total edges = 49  #>    missing edges = 0  #>    non-missing edges = 49  #>  density = 0.5444444  #>  #> Vertex attributes: #>   vertex.names: #>    character valued attribute #>    10 valid vertex names #>  #> No edge attributes #>  #> Network adjacency matrix: #>    1 2 3 4 5 6 7 8 9 10 #> 1  0 0 1 1 0 0 1 0 1  1 #> 2  1 0 0 1 0 0 1 0 0  0 #> 3  0 1 0 0 0 0 1 0 0  0 #> 4  1 0 1 0 1 1 1 0 1  1 #> 5  1 0 0 0 0 0 1 0 1  1 #> 6  1 1 1 1 1 0 0 1 1  1 #> 7  1 1 0 0 1 1 0 0 0  0 #> 8  0 0 1 0 1 0 1 0 0  1 #> 9  1 0 0 1 1 0 1 1 0  1 #> 10 1 1 1 1 1 1 0 0 0  0"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"weighted-networks","dir":"","previous_headings":"Network Encoding","what":"Weighted Networks","title":"Extinction Simulation in Ecological Networks","text":"Weighted networks allow quantification relative importance interactions interaction partners. Thus, network matrices weighted networks bound values exactly 0 1, rather ranges: express matrices network objects ready use NetworkExtinction functions, run following (NetworkExtinction attempts detects matrix input): NOTE: NetworkExtinction functions require network objects can work just fine matrix objects.","code":"set.seed(42) weight_mat <- matrix(   round(     runif(n = 1e2, min = 0, max = 1),      2),   ncol = 10, nrow = 10) weight_mat #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,] 0.91 0.46 0.90 0.74 0.38 0.33 0.68 0.04 0.58  0.67 #>  [2,] 0.94 0.72 0.14 0.81 0.44 0.35 0.98 0.14 0.16  0.00 #>  [3,] 0.29 0.93 0.99 0.39 0.04 0.40 0.76 0.22 0.36  0.21 #>  [4,] 0.83 0.26 0.95 0.69 0.97 0.78 0.57 0.48 0.65  0.93 #>  [5,] 0.64 0.46 0.08 0.00 0.43 0.04 0.85 0.20 0.78  0.93 #>  [6,] 0.52 0.94 0.51 0.83 0.96 0.75 0.19 0.72 0.56  0.73 #>  [7,] 0.74 0.98 0.39 0.01 0.89 0.68 0.27 0.01 0.23  0.33 #>  [8,] 0.13 0.12 0.91 0.21 0.64 0.17 0.83 0.38 0.09  0.52 #>  [9,] 0.66 0.47 0.45 0.91 0.97 0.26 0.69 0.51 0.09  0.74 #> [10,] 0.71 0.56 0.84 0.61 0.62 0.51 0.24 0.00 0.31  0.62 weight_net <- as.network(weight_mat, matrix.type = \"adjacency\",                           ignore.eval = FALSE, names.eval = 'weight') summary(weight_net) #> Network attributes: #>   vertices = 10 #>   directed = TRUE #>   hyper = FALSE #>   loops = FALSE #>   multiple = FALSE #>   bipartite = FALSE #>  total edges = 87  #>    missing edges = 0  #>    non-missing edges = 87  #>  density = 0.9666667  #>  #> Vertex attributes: #>   vertex.names: #>    character valued attribute #>    10 valid vertex names #>  #> Edge attributes: #>  #>  weight: #>    numeric valued attribute #>    attribute summary: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.0100  0.2750  0.5600  0.5361  0.7800  0.9800  #>  #> Network adjacency matrix: #>    1 2 3 4 5 6 7 8 9 10 #> 1  0 1 1 1 1 1 1 1 1  1 #> 2  1 0 1 1 1 1 1 1 1  0 #> 3  1 1 0 1 1 1 1 1 1  1 #> 4  1 1 1 0 1 1 1 1 1  1 #> 5  1 1 1 0 0 1 1 1 1  1 #> 6  1 1 1 1 1 0 1 1 1  1 #> 7  1 1 1 1 1 1 0 1 1  1 #> 8  1 1 1 1 1 1 1 0 1  1 #> 9  1 1 1 1 1 1 1 1 0  1 #> 10 1 1 1 1 1 1 1 0 1  0"},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"extinctions-from-most-to-less-conected-species-in-the-network","dir":"","previous_headings":"Extinctions functions","what":"Extinctions from most to less conected species in the network","title":"Extinction Simulation in Ecological Networks","text":"Mostconnected() function sorts species connected node least connected node, using total degree. , removes connected node network, simulating extinction, recalculates topological indexes network counts many species indegree 0 (secondary extinction), considering primary producers. , removes nodes secondarily extinct previous step recalculates node new connected species. step repeated number links network zero (Sole Montoya 2001; Dunne, Williams, Martinez 2002; Dunne Williams 2009). result function list contains dataframe shown table 1. first column called Spp indicates order species removed simulating extinction. column Secondary_extinctions represents numbers species become extinct given food items left food web, AccSecondaryExtinction column represents accumulated secondary extinctions. (plot results, see function ExtinctionPlot().) Figure 3. graph shows number accumulated secondary extinctions occur removing species least connected species addition, list returned SimulateExtinctions() also contains final Network remains primary extinctions finished:","code":"library(NetworkExtinction) data(\"net\") SimulateExtinctions(Network = net, Method = \"Mostconnected\") data(\"More_Connected\") history <- SimulateExtinctions(Network = net, Method = \"Mostconnected\") ExtinctionPlot(History = history[[1]], Variable = \"AccSecExt\")"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"extinctions-using-a-customized-order","dir":"","previous_headings":"Extinctions functions","what":"Extinctions using a customized order","title":"Extinction Simulation in Ecological Networks","text":"ExtinctionOrder() function takes network extinguishes nodes using customized order. , calculates topological network indexes secondary extinctions. toy network, nodes 1-4 primary producers nodes 9 10 represent apex predators. Let’s see happens sequentially remove apex predators: Already removal node 5, loose support species network. Figure 4. graph shows number accumulated secondary extinctions occur removing species custom order. results function dataframe topological indexes network calculated extinction step (Table 2), plot shows number accumulated secondary extinctions occurred removed node (Figure 4).","code":"data(\"net\") SimulateExtinctions(Network = net, Order = 1:8, Method = \"Ordered\")"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"random-extinction","dir":"","previous_headings":"Extinctions functions","what":"Random extinction","title":"Extinction Simulation in Ecological Networks","text":"RandomExtinctions() function generates n random extinction orders, determined argument nsim. first result function dataframe (table 3). SimNum argument, can control many nodes network simulated go extinct random extinction order. , choose number set custom order example . column NumExt represents number species removed, AccSecondaryExtinction average number secondary extinctions species removed, SdAccSecondaryExtinction standard deviation. second result graph (figure 5), x axis number species removed y axis number accumulated secondary extinctions. solid line average number secondary extinctions every simulated primary extinction, red area represents mean ±\\pm standard deviation simulations. Figure 5. resulting graph RandomExtinctions function","code":"data(net) set.seed(707) RandomExtinctions(Network= net, nsim= 100, SimNum = 8)"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"comparison-of-null-hypothesis-with-other-extinction-histories","dir":"","previous_headings":"Extinctions functions","what":"Comparison of Null hypothesis with other extinction histories","title":"Extinction Simulation in Ecological Networks","text":"RandomExtinctons() function generates null hypothesis us compare either extinction history generated ExtinctionOrder() function Mostconnected() function. order compare expected extinctions developed null hypothesis observed extinction history, developed CompareExtinctions() function. way use last function first create extinction history null hypothesis, CompareExtinctions() function compare extinction histories. result graph (Figue 6) dashed line showing observed extinction history solid line showing expected value secondary extinctions randomly generated. Figure 6. resulting graph CompareExtinctions function, dashed line shows observed extinction history, solid line shows expected value secondary extinctions originated random","code":"data(\"net\") Comparison <- CompareExtinctions(Nullmodel = Test, Hypothesis = Order)"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"plotting-the-extinction-histories-of-a-network","dir":"","previous_headings":"","what":"Plotting the extinction histories of a network","title":"Extinction Simulation in Ecological Networks","text":"ExtinctionPlot() function takes NetworkTopology class object plots index interest every extinction. default, function plots number accumulated secondary extinctions every primary extinction (Figure 7), indexes can plotted function changing Variable argument (Figure 8). Figure 7. Example use ExtinctionPlot function showing accumulated secondary extinctions number extinctions Figure 8. Another example use ExtinctionPlot function showing number links per species number extinctions","code":"data(net) ExtinctionPlot(History = Order[[1]]) ExtinctionPlot(History = Order[[1]], Variable = \"Link_density\")"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"degree-distribution-function","dir":"","previous_headings":"","what":"Degree distribution function","title":"Extinction Simulation in Ecological Networks","text":"DegreeDistribution() function calculates cumulative distribution number links species food network (Estrada 2007). , observed distribution fitted exponential, power law models. results function shown figure 9 table 4. graph shows observed degree distribution log log scale fitting three models mentioned , example use example dataset Chilean litoral rocky shores (Kéfi et al. 2015). table shows fitted model information ordered descending AIC, , model first row probable distribution, followed second finally third distribution case (Table 3), Exponential distribution best model, followed Power law model. Figure 9: Fitted vs observed values degree distribution. black line points show observed values, red, green blue lines show fitted values Exponential, power law trucated distribution, respectively Table 4: Model selection analysis main objective fitting cumulative distribution degrees models, determine vulnerability network removal connected species related degree distribution. Networks follow power law distribution vulnerable removal connected nodes, networks follow exponential degree distribution less vulnerable removal connected nodes (Albert Barabási 2002; Dunne, Williams, Martinez 2002; Estrada 2007; Santana et al. 2013).","code":"data(\"chilean_intertidal\") DegreeDistribution(chilean_intertidal)"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"inter-network-dependendancy","dir":"","previous_headings":"","what":"Inter-Network Dependendancy","title":"Extinction Simulation in Ecological Networks","text":"default, functions NetworkExtinction assume , secondary extinction happen, node needs loose connections prey (NetworkType == \"Trophic\") nodes (NetworkType == \"Mutualistic\"). One may also want assume species capable sustaining existence given threshold remaining interaction strengths. implemented argument, one can either set global node-dependency interaction strengths , alternatively, define value node supplied network. minimal example, let’s consider primary extinctions two producers toy network taking account interaction strength loss thresholds: Table 5: resulting dataframe basic version SimulateExtinctions can see, base version SimulateExtinctions(), obtain two secondary extinctions. Now, let’s consider species net need retain minimum 70% interaction strength go extinct (rather 0% default): Table 6: resulting dataframe interaction-strength loss version SimulateExtinctions can see, drastically changes many secondary extinctions estimate.","code":"IS_0 <- SimulateExtinctions(Network = net, Order = 1:2, Method = \"Ordered\")[[1]] IS_0.7 <- SimulateExtinctions(Network = net, Order = 1:2, Method = \"Ordered\", IS = 0.7)[[1]]"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/index.html","id":"rewiring-potential","dir":"","previous_headings":"","what":"Rewiring Potential","title":"Extinction Simulation in Ecological Networks","text":"Ecological networks aren’t static assume species may shift connections response extinctions association/interaction partner. Rewiring processes can simulated NetworkExtinction using Rewiring, RewiringDist, RewiringProb arguments. Let’s start RewiringDist. matrix contains information similarities rewiring potential species indexed columns indexed rows. package comes example data set : random distance matrix. sake example, assume values represent probabilities rewiring. tweak bit make useful toy example trophic network, setting values 0: matrix makes lot sense purposes. clarify read data: species 8 (column) .663.663 chance rewiring species 2 (row). Next, Rewiring function argument , just like argument can set globally individually node. used calculate probabilities rewiring data RewiringDist. Since assume RewiringDist already contain probabilities example, simply set RewiringDist return data without changing : Lastly, RewiringProb called upon determine whether rewiring can happen among potential rewiring partners. potential rewiring partner comes probability higher threshold, rewiring happens. multiple potential partners meet threshold, rewiring happens potential partner highest probability. Let’s keep default 50% . Finally, let’s together example . Can reduce number secondary extinctions allowing rewiring? Table 7: resulting dataframe rewiring version SimulateExtinctions Indeed, made one less secondary extinction second primary extinction!","code":"data(dist) dist #>             1         2          3          4         5         6         7 #> 1  0.00000000 0.4593111 0.10593644 0.30189790 0.4705959 0.1783138 0.4530299 #> 2  0.45931109 0.0000000 0.56524753 0.76120899 0.8902942 0.5980121 0.8727282 #> 3  0.10593644 0.5652475 0.00000000 0.19596146 0.5765323 0.2842503 0.5589664 #> 4  0.30189790 0.7612090 0.19596146 0.00000000 0.7724938 0.4802117 0.7549278 #> 5  0.47059588 0.8902942 0.57653232 0.77249378 0.0000000 0.2922820 0.5669981 #> 6  0.17831383 0.5980121 0.28425027 0.48021173 0.2922820 0.0000000 0.2747161 #> 7  0.45302992 0.8727282 0.55896636 0.75492782 0.5669981 0.2747161 0.0000000 #> 8  0.20346538 0.6627765 0.09752893 0.09843253 0.6740613 0.3817792 0.6564953 #> 9  0.01647744 0.4428337 0.12241388 0.31837534 0.4870733 0.1947913 0.4695074 #> 10 0.54697008 0.4174089 0.44103364 0.63699510 0.5059987 0.7252839 1.0000000 #>             8          9        10 #> 1  0.20346538 0.01647744 0.5469701 #> 2  0.66277647 0.44283365 0.4174089 #> 3  0.09752893 0.12241388 0.4410336 #> 4  0.09843253 0.31837534 0.6369951 #> 5  0.67406125 0.48707331 0.5059987 #> 6  0.38177920 0.19479127 0.7252839 #> 7  0.65649529 0.46950735 1.0000000 #> 8  0.00000000 0.21994281 0.5385626 #> 9  0.21994281 0.00000000 0.5634475 #> 10 0.53856257 0.56344752 0.0000000 dist[,1:4] <- 0 # producers don't worry about rewiring dist[5:10,5:8] <- 0 # intermediate consumders can only rewire to producers dist[c(1:4, 9:10), 9:10] <- 0 # apex predators can only rewire to intermediate consumers dist #>    1 2 3 4         5         6         7          8         9        10 #> 1  0 0 0 0 0.4705959 0.1783138 0.4530299 0.20346538 0.0000000 0.0000000 #> 2  0 0 0 0 0.8902942 0.5980121 0.8727282 0.66277647 0.0000000 0.0000000 #> 3  0 0 0 0 0.5765323 0.2842503 0.5589664 0.09752893 0.0000000 0.0000000 #> 4  0 0 0 0 0.7724938 0.4802117 0.7549278 0.09843253 0.0000000 0.0000000 #> 5  0 0 0 0 0.0000000 0.0000000 0.0000000 0.00000000 0.4870733 0.5059987 #> 6  0 0 0 0 0.0000000 0.0000000 0.0000000 0.00000000 0.1947913 0.7252839 #> 7  0 0 0 0 0.0000000 0.0000000 0.0000000 0.00000000 0.4695074 1.0000000 #> 8  0 0 0 0 0.0000000 0.0000000 0.0000000 0.00000000 0.2199428 0.5385626 #> 9  0 0 0 0 0.0000000 0.0000000 0.0000000 0.00000000 0.0000000 0.0000000 #> 10 0 0 0 0 0.0000000 0.0000000 0.0000000 0.00000000 0.0000000 0.0000000 RewiringDist <- function(x){x} Rewiring <- SimulateExtinctions(Network = net, Order = 1:2, Method = \"Ordered\", IS = 0.7,                               Rewiring = function(x){x}, RewiringDist = dist, RewiringProb = 0.5)[[1]]"},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/CompareExtinctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison of Null hypothesis with other extinction histories — CompareExtinctions","title":"Comparison of Null hypothesis with other extinction histories — CompareExtinctions","text":"compares object generated either Mostconnected ExtinctionOrder functions null hypothesis generated RandomExtinctions function important RandomExtinctions plot = T.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/CompareExtinctions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison of Null hypothesis with other extinction histories — CompareExtinctions","text":"","code":"CompareExtinctions(Nullmodel, Hypothesis)"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/CompareExtinctions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison of Null hypothesis with other extinction histories — CompareExtinctions","text":"Nullmodel object generated RandomExtinctions Hypothesis Extinction history generated Mostconnected ExtinctionOrder fuction","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/CompareExtinctions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparison of Null hypothesis with other extinction histories — CompareExtinctions","text":"plot comparing expected value secondary extinctions originated random observed extinction history.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/CompareExtinctions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Comparison of Null hypothesis with other extinction histories — CompareExtinctions","text":"Derek Corcoran <derek.corcoran.barrios@gmail.com> M. Isidora Ávila-Thieme <msavila@uc.cl>","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/CompareExtinctions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparison of Null hypothesis with other extinction histories — CompareExtinctions","text":"","code":"if (FALSE) { # \\dontrun{ data(\"Less_Connected\") History <- SimulateExtinctions(Network = Less_Connected, Method = \"Mostconnected\") NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100) CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History) } # }"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/DegreeDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Degree distribution of the network — DegreeDistribution","title":"Degree distribution of the network — DegreeDistribution","text":"function calculates degree distribution network. First fits exponential, power law truncated power law distribution models, calculates AIC values select best fit, finally plots degree distribution log log scale showing three fitted models mentioned observed distribution.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/DegreeDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degree distribution of the network — DegreeDistribution","text":"","code":"DegreeDistribution(Network, scale = \"arithmetic\")"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/DegreeDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Degree distribution of the network — DegreeDistribution","text":"Network trophic network class network scale character stating graph log-log scale (\"LogLog\") arithmetic scale (\"arithmetic\"), defaults arithmetic","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/DegreeDistribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Degree distribution of the network — DegreeDistribution","text":"exports three principal results: 1. list network degree distribution values value fit model 2. list model results AIC distribution models 3. Ghraph degree distribution models adjust DDvalues, k represent degree network cumulative probability specie degree (pk). Observation: graph, zero values represented result incorporate DF result","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/DegreeDistribution.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Degree distribution of the network — DegreeDistribution","text":"Derek Corcoran <derek.corcoran.barrios@gmail.com> M.Isidora Avila Thieme <msavila@uc.cl>","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/DegreeDistribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Degree distribution of the network — DegreeDistribution","text":"","code":"library(NetworkExtinction) data(\"chilean_intertidal\") DegreeDistribution(chilean_intertidal) #> Joining with `by = join_by(K, Cumulative, LogK, LogCum, Exp)` #> Joining with `by = join_by(K, Cumulative, LogK, LogCum, Exp, LogExp, LogPower)` #> Joining with `by = join_by(sigma, isConv, finTol, logLik, AIC, BIC, deviance, #> df.residual, nobs, model, Normal.Resid, family, AICcNorm)` #> Joining with `by = join_by(logLik, AIC, BIC, deviance, df.residual, nobs, #> model, Normal.Resid, family, AICcNorm)` #> Joining with `by = join_by(logLik, AIC, BIC, deviance, df.residual, nobs, #> model, Normal.Resid, family, AICcNorm, null.deviance, df.null)` #> $DDvalues #>     K  Cumulative      LogK      LogCum        Exp     LogExp   LogPower #> 1   0 1.000000000      -Inf  0.00000000 1.17799969         NA         NA #> 2   1 1.000000000 0.0000000  0.00000000 1.12910049 1.83049523 9.44903010 #> 3   2 1.000000000 0.6931472  0.00000000 1.08223112 1.70946324 4.12868593 #> 4   3 0.943925234 1.0986123 -0.05770832 1.03730731 1.59643387 2.54374592 #> 5   4 0.934579439 1.3862944 -0.06765865 0.99424830 1.49087797 1.80399970 #> 6   5 0.915887850 1.6094379 -0.08786136 0.95297669 1.39230142 1.38190772 #> 7   6 0.906542056 1.7917595 -0.09811786 0.91341828 1.30024272 1.11147154 #> 8   7 0.906542056 1.9459101 -0.09811786 0.87550195 1.21427093 0.92455235 #> 9   8 0.897196262 2.0794415 -0.10848064 0.83915954 1.13398357 0.78824473 #> 10  9 0.869158879 2.1972246 -0.14022934 0.80432572 1.05900480 0.68479445 #> 11 10 0.859813084 2.3025851 -0.15104026 0.77093787 0.98898361 0.60381467 #> 12 11 0.822429907 2.3978953 -0.19549202 0.73893595 0.92359221 0.53884118 #> 13 12 0.785046729 2.4849066 -0.24201204 0.70826245 0.86252447 0.48564952 #> 14 13 0.757009346 2.5649494 -0.27837968 0.67886222 0.80549453 0.44136734 #> 15 14 0.728971963 2.6390573 -0.31612001 0.65068240 0.75223539 0.40397652 #> 16 15 0.691588785 2.7080502 -0.36876374 0.62367233 0.70249773 0.37201936 #> 17 16 0.663551402 2.7725887 -0.41014896 0.59778347 0.65604872 0.34441788 #> 18 17 0.663551402 2.8332133 -0.41014896 0.57296925 0.61267091 0.32035847 #> 19 18 0.626168224 2.8903718 -0.46813622 0.54918509 0.57216123 0.29921602 #> 20 19 0.588785047 2.9444390 -0.52969411 0.52638822 0.53433004 0.28050271 #> 21 20 0.588785047 2.9957323 -0.52969411 0.50453765 0.49900024 0.26383249 #> 22 21 0.570093458 3.0445224 -0.56195497 0.48359411 0.46600644 0.24889605 #> 23 22 0.560747664 3.0910425 -0.57848427 0.46351994 0.43519419 0.23544279 #> 24 23 0.542056075 3.1354942 -0.61238582 0.44427905 0.40641923 0.22326760 #> 25 24 0.495327103 3.1780538 -0.70253692 0.42583687 0.37954688 0.21220107 #> 26 25 0.495327103 3.2188758 -0.70253692 0.40816022 0.35445131 0.20210211 #> 27 26 0.467289720 3.2580965 -0.76080583 0.39121734 0.33101506 0.19285229 #> 28 27 0.420560748 3.2958369 -0.86616634 0.37497777 0.30912841 0.18435152 #> 29 28 0.420560748 3.3322045 -0.86616634 0.35941230 0.28868890 0.17651464 #> 30 29 0.383177570 3.3672958 -0.95925677 0.34449297 0.26960085 0.16926877 #> 31 30 0.327102804 3.4011974 -1.11748077 0.33019294 0.25177489 0.16255119 #> 32 31 0.299065421 3.4339872 -1.20709293 0.31648651 0.23512758 0.15630763 #> 33 32 0.299065421 3.4657359 -1.20709293 0.30334904 0.21958099 0.15049092 #> 34 33 0.299065421 3.4965076 -1.20709293 0.29075691 0.20506234 0.14505987 #> 35 34 0.289719626 3.5263605 -1.23884163 0.27868748 0.19150366 0.13997833 #> 36 35 0.271028037 3.5553481 -1.30553300 0.26711906 0.17884148 0.13521452 #> 37 36 0.242990654 3.5835189 -1.41473230 0.25603085 0.16701651 0.13074029 #> 38 37 0.205607477 3.6109179 -1.58178638 0.24540292 0.15597341 0.12653074 #> 39 38 0.186915888 3.6375862 -1.67709656 0.23521615 0.14566048 0.12256365 #> 40 39 0.140186916 3.6635616 -1.96477863 0.22545224 0.13602944 0.11881922 #> 41 40 0.130841121 3.6888795 -2.03377150 0.21609364 0.12703520 0.11527971 #> 42 41 0.102803738 3.7135721 -2.27493356 0.20712351 0.11863566 0.11192920 #> 43 42 0.102803738 3.7376696 -2.27493356 0.19852574 0.11079149 0.10875334 #> 44 43 0.093457944 3.7612001 -2.37024374 0.19028486 0.10346598 0.10573919 #> 45 44 0.093457944 3.7841896 -2.37024374 0.18238607 0.09662483 0.10287504 #> 46 45 0.093457944 3.8066625 -2.37024374 0.17481516 0.09023601 0.10015025 #> 47 46 0.093457944 3.8286414 -2.37024374 0.16755852 0.08426963 0.09755518 #> 48 47 0.084112150 3.8501476 -2.47560426 0.16060310 0.07869774 0.09508101 #> 49 48 0.084112150 3.8712010 -2.47560426 0.15393641 0.07349426 0.09271974 #> 50 49 0.084112150 3.8918203 -2.47560426 0.14754645 0.06863483 0.09046400 #> 51 50 0.084112150 3.9120230 -2.47560426 0.14142174 0.06409671 0.08830707 #> 52 51 0.084112150 3.9318256 -2.47560426 0.13555127 0.05985865 0.08624277 #> 53 52 0.074766355 3.9512437 -2.59338729 0.12992449 0.05590081 0.08426543 #> 54 53 0.074766355 3.9702919 -2.59338729 0.12453128 0.05220466 0.08236980 #> 55 54 0.074766355 3.9889840 -2.59338729 0.11936194 0.04875289 0.08055108 #> 56 55 0.074766355 4.0073332 -2.59338729 0.11440718 0.04552936 0.07880478 #> 57 56 0.056074766 4.0253517 -2.88106937 0.10965810 0.04251897 0.07712681 #> 58 57 0.046728972 4.0430513 -3.06339092 0.10510615 0.03970762 0.07551332 #> 59 58 0.046728972 4.0604430 -3.06339092 0.10074315 0.03708216 0.07396078 #> 60 59 0.037383178 4.0775374 -3.28653447 0.09656127 0.03463030 0.07246588 #> 61 60 0.018691589 4.0943446 -3.97968165 0.09255298 0.03234055 0.07102558 #> 62 61 0.018691589 4.1108739 -3.97968165 0.08871107 0.03020220 0.06963700 #> 63 62 0.018691589 4.1271344 -3.97968165 0.08502864 0.02820524 0.06829750 #> 64 63 0.009345794 4.1431347 -4.67282883 0.08149907 0.02634031 0.06700458 #> 65 64 0.009345794 4.1588831 -4.67282883 0.07811601 0.02459869 0.06575593 #> 66 65 0.009345794 4.1743873 -4.67282883 0.07487339 0.02297223 0.06454937 #> 67 66 0.009345794 4.1896547 -4.67282883 0.07176537 0.02145331 0.06338287 #> 68 67 0.000000000 4.2046926        -Inf 0.06878636         NA         NA #>        Power #> 1         NA #> 2  1.5397399 #> 3  1.1281356 #> 4  0.9404615 #> 5  0.8265616 #> 6  0.7478031 #> 7  0.6890567 #> 8  0.6430028 #> 9  0.6056046 #> 10 0.5744268 #> 11 0.5478999 #> 12 0.5249602 #> 13 0.5048576 #> 14 0.4870455 #> 15 0.4711148 #> 16 0.4567525 #> 17 0.4437140 #> 18 0.4318054 #> 19 0.4208706 #> 20 0.4107822 #> 21 0.4014349 #> 22 0.3927412 #> 23 0.3846275 #> 24 0.3770311 #> 25 0.3698987 #> 26 0.3631844 #> 27 0.3568482 #> 28 0.3508555 #> 29 0.3451761 #> 30 0.3397832 #> 31 0.3346531 #> 32 0.3297650 #> 33 0.3251001 #> 34 0.3206417 #> 35 0.3163749 #> 36 0.3122862 #> 37 0.3083632 #> 38 0.3045950 #> 39 0.3009716 #> 40 0.2974837 #> 41 0.2941231 #> 42 0.2908819 #> 43 0.2877534 #> 44 0.2847309 #> 45 0.2818086 #> 46 0.2789810 #> 47 0.2762429 #> 48 0.2735898 #> 49 0.2710172 #> 50 0.2685210 #> 51 0.2660977 #> 52 0.2637435 #> 53 0.2614553 #> 54 0.2592299 #> 55 0.2570646 #> 56 0.2549566 #> 57 0.2529034 #> 58 0.2509026 #> 59 0.2489521 #> 60 0.2470497 #> 61 0.2451934 #> 62 0.2433814 #> 63 0.2416120 #> 64 0.2398834 #> 65 0.2381941 #> 66 0.2365426 #> 67 0.2349276 #> 68        NA #>  #> $models #> # A tibble: 4 × 6 #>   logLik    AIC    BIC model    Normal.Resid family      #>    <dbl>  <dbl>  <dbl> <chr>    <chr>        <chr>       #> 1   83.1 -160.  -154.  Exp      No           Exponential #> 2   13.4  -20.8  -14.2 Power    No           PowerLaw    #> 3  -27.5   61.0   67.5 LogExp   No           Exponential #> 4  -80.8  168.   174.  LogPower No           PowerLaw    #>  #> $graph #> Warning: Removed 20 rows containing missing values or values outside the scale range #> (`geom_line()`).  #>  #> $params #> # A tibble: 8 × 6 #>   term   estimate std.error statistic  p.value model    #>   <chr>     <dbl>     <dbl>     <dbl>    <dbl> <chr>    #> 1 c        2.25     0.384        5.84 1.87e- 7 LogPower #> 2 Beta    -1.19     0.114      -10.4  1.90e-15 LogPower #> 3 Beta    -0.449    0.0402     -11.2  1.13e-16 Power    #> 4 c        1.54     0.150       10.3  3.63e-15 Power    #> 5 c        0.673    0.0928       7.25 6.68e-10 LogExp   #> 6 Lambda  -0.0684   0.00241    -28.4  5.33e-38 LogExp   #> 7 Lambda  -0.0424   0.00157    -27.0  2.31e-37 Exp      #> 8 c        0.164    0.0247       6.63 7.39e- 9 Exp      #>"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/ExtinctionOrder.html","id":null,"dir":"Reference","previous_headings":"","what":"Extinctions analysis from custom order — ExtinctionOrder","title":"Extinctions analysis from custom order — ExtinctionOrder","text":"function takes network eliminates nodes using custom order. Subsequently, secondary extinctions tallied . Secondary extinction severity can targeted manipulating node-dependency network edges () node-rewiring potential upon loss links (Rewiring).","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/ExtinctionOrder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extinctions analysis from custom order — ExtinctionOrder","text":"","code":"ExtinctionOrder(   Network,   Order,   NetworkType = \"Trophic\",   clust.method = \"cluster_infomap\",   IS = 0,   Rewiring = FALSE,   RewiringDist,   RewiringProb = 0.5,   verbose = TRUE,   RecalcConnect = FALSE,   forceFULL = FALSE )"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/ExtinctionOrder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extinctions analysis from custom order — ExtinctionOrder","text":"Network network representation adjacency matrix, edgelist, network object Order numeric vector indexing order primary extinctions. Method = Mostconnected Order must NULL. Order NULL, Method internally forced Ordered. NetworkType character options Trophic Mutualistic - used calculate secondary extinctions. clust.method character options cluster_edge_betweenness, cluster_label_prop cluster_infomap, defaults cluster_infomap either numeric named vector numerics. Identifies threshold relative interaction strength species require considered secondarily extinct (.e. = 0.3 leads removal nodes lose 70percent interaction strength Network argument). named vector, names must correspond vertex names Network argument. Rewiring either function named vector functions. Signifies rewiring probabilities calculated RewiringDist argument. FALSE, rewiring carried . RewiringDist numeric matrix NxN dimension (N... number nodes Network). Contains, example, phylogenetic functional trait distances nodes Network used Rewiring argument calculate rewiring probabilities. Rewiring == function(x)x, matrix expected contain probabilities connection present species-pairs. RewiringProb numeric identifies threshold assume rewiring potential met. verbose Logical. Whether report function progress . RecalcConnect Logical Numeric. Whether recalculate connectedness node following round extinction simulation subsequently update extinction order newly mostconnected nodes. forceFULL Logical. Whether continue removal nodes initial order depleted. force simulations execute extinctions check secondary extinctions/new links network change anylonger.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/ExtinctionOrder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extinctions analysis from custom order — ExtinctionOrder","text":"exports list containing data frame characteristics network every extinction network object containing final network. resulting data frame contains 11 columns incorporate topological index, secondary extinctions, predation release, total extinctions network primary extinction.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/ExtinctionOrder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extinctions analysis from custom order — ExtinctionOrder","text":"NetworkType = Trophic, secondary extinctions occur predator, producers. NetworkType = Mutualistic, secondary extinctions occur species network. clust.method = cluster_edge_betweenness computes network modularity using cluster_edge_betweenness methods igraph detect communities clust.method = cluster_label_prop computes network modularity using cluster_label_prop methods igraph detect communities clust.method = cluster_infomap computes network modularity using cluster_infomap methods igraph detect communities, number nb.trials equal network size","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/ExtinctionOrder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extinctions analysis from custom order — ExtinctionOrder","text":"Derek Corcoran <derek.corcoran.barrios@gmail.com> M. Isidora Ávila-Thieme <msavila@uc.cl> Erik Kusch <erik.kusch@bio.au.dk>","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/ExtinctionPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the extinctions history of a network — ExtinctionPlot","title":"Plots the extinctions history of a network — ExtinctionPlot","text":"takes NetworkTopology class object plots network index every extinction","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/ExtinctionPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the extinctions history of a network — ExtinctionPlot","text":"","code":"ExtinctionPlot(History, Variable = \"AccSecExt\")"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/ExtinctionPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the extinctions history of a network — ExtinctionPlot","text":"History NetworkTopology object obtained Mostconnected function ExtinctionOrder function Variable variable NetworkTopology object want y variable","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/ExtinctionPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots the extinctions history of a network — ExtinctionPlot","text":"plot number extinctions x axis vs choosen variable Y axis","code":""},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/ExtinctionPlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plots the extinctions history of a network — ExtinctionPlot","text":"Derek Corcoran <derek.corcoran.barrios@gmail.com> M. Isidora Ávila-Thieme <msavila@uc.cl>","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/ExtinctionPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the extinctions history of a network — ExtinctionPlot","text":"","code":"# If you don't specify the y variable it will plot the secondary extinctions # by default data(\"net\") history <- SimulateExtinctions(Network = net, Method = \"Mostconnected\") #>    |                                                                               |                                                                      |   0%   |                                                                               |=======                                                               |  10%   |                                                                               |==============                                                        |  20%   |                                                                               |=====================                                                 |  30%   |                                                                               |============================                                          |  40%   |                                                                               |======================================================================| 100% #> Warning: Your network became completely unconnected before all primary extinctions were simulated. This happened at extinction step 4 out of 10 ExtinctionPlot(History = history$sims)  # You can also specify the variable to be ploted in the y axis ExtinctionPlot(History = history$sims, Variable = \"Link_density\")"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/Less_Connected.html","id":null,"dir":"Reference","previous_headings":"","what":"A sparsely connected foodweb — Less_Connected","title":"A sparsely connected foodweb — Less_Connected","text":"network 30 species 47 interactions. network connectance 0.03","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/Less_Connected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A sparsely connected foodweb — Less_Connected","text":"","code":"Less_Connected"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/Less_Connected.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A sparsely connected foodweb — Less_Connected","text":"network","code":""},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/More_Connected.html","id":null,"dir":"Reference","previous_headings":"","what":"A densely connected foodweb — More_Connected","title":"A densely connected foodweb — More_Connected","text":"trophic network 30 species 222 trophic interactions. foodweb connectance 0.3","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/More_Connected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A densely connected foodweb — More_Connected","text":"","code":"More_Connected"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/More_Connected.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A densely connected foodweb — More_Connected","text":"network","code":""},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/RandomExtinctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Random extinction — RandomExtinctions","title":"Random extinction — RandomExtinctions","text":"Generates null model generating random extinction histories calculating mean standard deviation accumulated secondary extinctions developed making n random extinction histories.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/RandomExtinctions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random extinction — RandomExtinctions","text":"","code":"RandomExtinctions(   Network,   nsim = 10,   Record = FALSE,   plot = FALSE,   SimNum = NULL,   NetworkType = \"Trophic\",   clust.method = \"cluster_infomap\",   parallel = FALSE,   ncores,   IS = 0,   Rewiring = FALSE,   RewiringDist = NULL,   RewiringProb = 0.5,   verbose = TRUE,   forceFULL = FALSE )"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/RandomExtinctions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random extinction — RandomExtinctions","text":"Network network representation adjacency matrix, edgelist, network object nsim numeric, number simulations Record logical, TRUE, records every simulation can read raw results object FullSims plot logical TRUE, add graph results SimNum numeric, many nodes register primary extinction. default sets . NetworkType character options Trophic Mutualistic - used calculate secondary extinctions. clust.method character options cluster_edge_betweenness, cluster_label_prop cluster_infomap, defaults cluster_infomap parallel TRUE, use parallel procesing, FALSE (default) run sequentially ncores numeric, number cores use using parallel procesing either numeric named vector numerics. Identifies threshold relative interaction strength species require considered secondarily extinct (.e. = 0.3 leads removal nodes lose 70 precent interaction strength Network argument). named vector, names must correspond vertex names Network argument. Rewiring either function named vector functions. Signifies rewiring probabilities calculated RewiringDist argument. FALSE, rewiring carried . RewiringDist numeric matrix NxN dimension (N... number nodes Network). Contains, example, phylogenetic functional trait distances nodes Network used Rewiring argument calculate rewiring probabilities. Rewiring == function(x)x, matrix expected contain probabilities connection present species-pairs. RewiringProb numeric identifies threshold assume rewiring potential met. verbose Logical. Whether report function progress . forceFULL Logical. Whether continue removal nodes initial order depleted. force simulations execute extinctions check secondary extinctions/new links network change anylonger.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/RandomExtinctions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random extinction — RandomExtinctions","text":"exports list containing data frame characteristics network every extinction, network object containing final network, graph mean 95percent interval. resulting data frame contains 11 columns incorporate topological index, secondary extinctions, predation release, total extinctions network primary extinction.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/RandomExtinctions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random extinction — RandomExtinctions","text":"\"Note: using pre-defined order nodes primary removals option random extinction scenario, possible species predefined order may lost secondary extinctions. , counted primary removals. example, network five species ,B, ,D,E pre-defined \"random\" order removal C,,B,E,D removal C causing additional loss removal B causing additional loss E D, two primary removals (C B) required total network collapse, even though algorithm terminate third element removal vector, .e., C,,B.\" NetworkType = Trophic, secondary extinctions occur predator, producers. NetworkType = Mutualistic, secondary extinctions occur species network. clust.method = cluster_edge_betweenness computes network modularity using cluster_edge_betweenness methods igraph detect communities clust.method = cluster_label_prop computes network modularity using cluster_label_prop methods igraph detect communities clust.method = cluster_infomap computes network modularity using cluster_infomap methods igraph detect communities, number nb.trials equal network size","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/RandomExtinctions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random extinction — RandomExtinctions","text":"Derek Corcoran <derek.corcoran.barrios@gmail.com> M. Isidora Ávila-Thieme <msavila@uc.cl> Erik Kusch <erik.kusch@bio.au.dk>","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/RandomExtinctions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random extinction — RandomExtinctions","text":"","code":"#first example if (FALSE) { # \\dontrun{ data(\"More_Connected\") RandomExtinctions(Network = More_Connected, nsim = 20)  # Using parallel procesing ## Detect your number of cores divide by 2  cores <- ceiling(parallel::detectCores()/2)  RandomExtinctions(Network = More_Connected, nsim = 20, parallel = TRUE, ncores = cores) } # }"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/SimulateExtinctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extinctions analysis for ecological networks — SimulateExtinctions","title":"Extinctions analysis for ecological networks — SimulateExtinctions","text":"SimulateExtinctions function, can used test order species extinctions, species-dependency existing interaction strength, rewiring potential might affect stability network comparing  extinction history checking secondary extinctions.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/SimulateExtinctions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extinctions analysis for ecological networks — SimulateExtinctions","text":"","code":"SimulateExtinctions(   Network,   Method,   Order = NULL,   NetworkType = \"Trophic\",   clust.method = \"cluster_infomap\",   IS = 0,   Rewiring = FALSE,   RewiringDist,   RewiringProb = 0.5,   verbose = TRUE,   forceFULL = FALSE )"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/SimulateExtinctions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extinctions analysis for ecological networks — SimulateExtinctions","text":"Network network representation adjacency matrix, edgelist, network object Method character options Mostconnected, Leastconnected Ordered Order numeric vector indexing order primary extinctions. Method = Mostconnected Leastconnected Order must NULL. Order NULL, Method internally forced Ordered. NetworkType character options Trophic Mutualistic - used calculate secondary extinctions. clust.method character options cluster_edge_betweenness, cluster_label_prop cluster_infomap, defaults cluster_infomap either numeric named vector numerics. Identifies threshold relative interaction strength species require considered secondarily extinct (.e. = 0.3 leads removal nodes lose 70 percent interaction strength Network argument). named vector, names must correspond vertex names Network argument. Rewiring either function named vector functions. Signifies rewiring probabilities calculated RewiringDist argument. FALSE, rewiring carried . RewiringDist numeric matrix NxN dimension (N... number nodes Network). Contains, example, phylogenetic functional trait distances nodes Network used Rewiring argument calculate rewiring probabilities. Rewiring == function(x)x, matrix expected contain probabilities connection present species-pairs. RewiringProb numeric identifies threshold assume rewiring potential met. verbose Logical. Whether report function progress . forceFULL Logical. Whether continue removal nodes initial order depleted. force simulations execute extinctions check secondary extinctions/new links network change anylonger.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/SimulateExtinctions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extinctions analysis for ecological networks — SimulateExtinctions","text":"exports list containing data frame characteristics network every extinction network object containing final network. resulting data frame contains 11 columns incorporate topological index, secondary extinctions, predation release, total extinctions network primary extinction.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/SimulateExtinctions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extinctions analysis for ecological networks — SimulateExtinctions","text":"method Mostconnected, function takes network calculates node connected network, using total degree. remove connected node, calculates topological indexes network number secondary extinctions. process repeated entire network gone extinct. method Leastconnected, process prioritises nodes lowest degree. method Ordered, takes network, extinguishes nodes using custom order, calculates secondary extinctions plots accumulated secondary extinctions. NetworkType = Trophic, secondary extinctions occur predator, producers. NetworkType = Mutualistic, secondary extinctions occur species network. clust.method = cluster_edge_betweenness computes network modularity using cluster_edge_betweenness methods igraph detect communities clust.method = cluster_label_prop computes network modularity using cluster_label_prop methods igraph detect communities clust.method = cluster_infomap computes network modularity using cluster_infomap methods igraph detect communities, number nb.trials equal network size","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/SimulateExtinctions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extinctions analysis for ecological networks — SimulateExtinctions","text":"Derek Corcoran <derek.corcoran.barrios@gmail.com> M. Isidora Ávila-Thieme <msavila@uc.cl> Erik Kusch <erik.kusch@bio.au.dk>","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/SimulateExtinctions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extinctions analysis for ecological networks — SimulateExtinctions","text":"","code":"# Mostconnected example data(\"net\") SimulateExtinctions(Network = net, Method = \"Mostconnected\", clust.method = \"cluster_infomap\") #>    |                                                                               |                                                                      |   0%   |                                                                               |=======                                                               |  10%   |                                                                               |==============                                                        |  20%   |                                                                               |=====================                                                 |  30%   |                                                                               |============================                                          |  40%   |                                                                               |======================================================================| 100% #> Warning: Your network became completely unconnected before all primary extinctions were simulated. This happened at extinction step 4 out of 10 #> $sims #>   Spp S L          C Link_density Modularity SecExt Pred_release Iso_nodes #> 1   6 9 7 0.08641975    0.7777778  0.3163265      1            0         1 #> 2   7 7 4 0.08163265    0.5714286  0.0000000      0            2         2 #> 3   5 6 2 0.05555556    0.3333333  0.0000000      1            3         3 #> 4   2 4 0 0.00000000    0.0000000        NaN      1            3         4 #>   AccSecExt NumExt TotalExt #> 1         1      1        2 #> 2         1      2        3 #> 3         2      3        5 #> 4         3      4        7 #>  #> $R50 #> [1] 0.3 #>  #> $R100 #> [1] 0.7 #>  #> $Network #>  Network attributes: #>   vertices = 3  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = TRUE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 0  #>     missing edges= 0  #>     non-missing edges= 0  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes #>   #first Ordered example data(\"net\") SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = \"Ordered\" , clust.method = \"cluster_infomap\") #>    |                                                                               |                                                                      |   0%   |                                                                               |=======                                                               |  10%   |                                                                               |==============                                                        |  20%   |                                                                               |=====================                                                 |  30%   |                                                                               |============================                                          |  40%   |                                                                               |======================================================================| 100% #> Warning: Your network became completely unconnected before all primary extinctions were simulated. This happened at extinction step 4 out of 10 #> $sims #>   Spp S L         C Link_density Modularity SecExt Pred_release Iso_nodes #> 1   1 9 9 0.1111111    1.0000000  0.2901235      1            0         0 #> 2   2 7 6 0.1224490    0.8571429  0.0000000      1            0         0 #> 3   3 5 3 0.1200000    0.6000000  0.0000000      2            0         1 #> 4   4 2 1 0.2500000    0.5000000  0.0000000      1            0         0 #>   AccSecExt NumExt TotalExt #> 1         1      1        2 #> 2         2      2        4 #> 3         4      3        7 #> 4         5      4        9 #>  #> $R50 #> [1] 0.3 #>  #> $R100 #> [1] 0.5 #>  #> $Network #>  Network attributes: #>   vertices = 1  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = TRUE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 0  #>     missing edges= 0  #>     non-missing edges= 0  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #> No edge attributes #>    #Second Ordered example data(\"net\") SimulateExtinctions(Network = net, Order = c(2,8,9), Method = \"Ordered\", clust.method = \"cluster_infomap\") #>    |                                                                               |                                                                      |   0%   |                                                                               |=======================                                               |  33%   |                                                                               |===============================================                       |  67%   |                                                                               |======================================================================| 100% #> Warning: Primary extinctions of 9 skipped due to their prior extinction as secondary extinctions. #> $sims #>   Spp S L          C Link_density Modularity SecExt Pred_release Iso_nodes #> 1   2 9 8 0.09876543    0.8888889  0.3671875      1            0         0 #> 2   8 7 4 0.08163265    0.5714286  0.3750000      1            0         1 #>   AccSecExt NumExt TotalExt #> 1         1      1        2 #> 2         2      2        4 #>  #> $R50 #> [1] 0.3 #>  #> $R100 #> [1] 0.8 #>  #> $Network #>  Network attributes: #>   vertices = 6  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = TRUE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 4  #>     missing edges= 0  #>     non-missing edges= 4  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #>  Edge attribute names:  #>     weight  #>   #Network-Dependency Example data(\"net\") SimulateExtinctions(Network = net, Order = c(2,8), IS = 0.3, Method = \"Ordered\", clust.method = \"cluster_infomap\") #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% #> $sims #>   Spp S L          C Link_density Modularity SecExt Pred_release Iso_nodes #> 1   2 9 8 0.09876543    0.8888889  0.3671875      1            1         0 #> 2   8 7 4 0.08163265    0.5714286  0.3750000      1            0         1 #>   AccSecExt NumExt TotalExt #> 1         1      1        2 #> 2         2      2        4 #>  #> $R50 #> [1] 0.3 #>  #> $R100 #> [1] 0.8 #>  #> $Network #>  Network attributes: #>   vertices = 6  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = TRUE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 4  #>     missing edges= 0  #>     non-missing edges= 4  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #>  Edge attribute names:  #>     weight  #>    #Rewiring data(\"net\") data(dist) SimulateExtinctions(Network = net, Order = c(2,8), IS = 0.3, # assuming an exponential decline in rewiring potential # as values in RewiringDist increase Rewiring = function(x){1-pexp(x, rate = 1/0.5)}, RewiringDist = dist, # distance matrix RewiringProb = 0.2, # low threshold for rewiring potential Method = \"Ordered\", clust.method = \"cluster_infomap\") #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% #> $sims #>   Spp S L          C Link_density Modularity SecExt Pred_release Iso_nodes #> 1   2 9 8 0.09876543    0.8888889  0.3671875      0            0         0 #> 2   8 8 6 0.10714286    0.7500000  0.2777778      0            0         0 #>   AccSecExt NumExt TotalExt #> 1         0      1        1 #> 2         0      2        2 #>  #> $R50 #> [1] 0.5 #>  #> $R100 #> [1] 1 #>  #> $Network #>  Network attributes: #>   vertices = 8  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 9  #>     missing edges= 0  #>     non-missing edges= 9  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #>  Edge attribute names:  #>     weight  #>   #Rewiring, assuming dist contains probabilities #' data(\"net\") data(dist) SimulateExtinctions(Network = net, Order = c(2,8), IS = 0.3, Rewiring = function(x){x}, # no changes to the RewiringDist object means RewiringDist = dist, RewiringProb = 0.2, Method = \"Ordered\", clust.method = \"cluster_infomap\") #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% #> $sims #>   Spp S L          C Link_density Modularity SecExt Pred_release Iso_nodes #> 1   2 9 8 0.09876543    0.8888889  0.3671875      0            0         0 #> 2   8 8 6 0.10714286    0.7500000  0.2777778      0            0         0 #>   AccSecExt NumExt TotalExt #> 1         0      1        1 #> 2         0      2        2 #>  #> $R50 #> [1] 0.5 #>  #> $R100 #> [1] 1 #>  #> $Network #>  Network attributes: #>   vertices = 8  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 8  #>     missing edges= 0  #>     non-missing edges= 8  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #>  Edge attribute names:  #>     weight  #>   ## mutualistic network example data(mutual) # tallying of first-order secondary extinctions only SimulateExtinctions(Network = mutual, Order = 3, NetworkType = \"Mutualistic\", IS = 1, forceFULL = FALSE) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% #> $sims #>   Spp S L         C Link_density Modularity SecExt Pred_release Iso_nodes #> 1   3 9 6 0.1666667    0.6666667  0.6111111      3           NA         0 #>   AccSecExt NumExt TotalExt #> 1         3      1        4 #>  #> $R50 #> [1] 0.2 #>  #> $R100 #> [1] 0.7 #>  #> $Network #>  Network attributes: #>   vertices = 6  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 2  #>     missing edges= 0  #>     non-missing edges= 2  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #>  Edge attribute names:  #>     weight  #>  # tallying of all secondary extinctions until network contains no #more potential secondary extinctions SimulateExtinctions(Network = mutual, Order = 3, NetworkType = \"Mutualistic\", IS = 1, forceFULL = TRUE) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% #> Warning: Primary extinctions of 7, 8, 9, 2, 4, 5, 10 skipped due to their prior extinction as secondary extinctions. #> $sims #>   Spp S L         C Link_density Modularity SecExt Pred_release Iso_nodes #> 1   3 9 6 0.1666667    0.6666667  0.6111111      3           NA         0 #> 2   8 6 2 0.1333333    0.3333333  0.5000000      3           NA         2 #> 3   9 3 1 0.3333333    0.3333333  0.0000000      1           NA         1 #> 4   2 2 1 1.0000000    0.5000000  0.0000000      0           NA         0 #> 5   4 2 1 1.0000000    0.5000000  0.0000000      0           NA         0 #> 6   5 2 1 1.0000000    0.5000000  0.0000000      0           NA         0 #> 7  10 2 1 1.0000000    0.5000000  0.0000000      0           NA         0 #>   AccSecExt NumExt TotalExt #> 1         3      1        4 #> 2         6      2        8 #> 3         7      3       10 #> 4         7      4       11 #> 5         7      5       12 #> 6         7      6       13 #> 7         7      7       14 #>  #> $R50 #> [1] 0.2 #>  #> $R100 #> [1] 0.3 #>  #> $Network #>  Network attributes: #>   vertices = 2  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 1  #>     missing edges= 0  #>     non-missing edges= 1  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #>  Edge attribute names:  #>     weight  #>"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/chilean_intertidal.html","id":null,"dir":"Reference","previous_headings":"","what":"The binaryfoodweb of the intertidal zone in central chile — chilean_intertidal","title":"The binaryfoodweb of the intertidal zone in central chile — chilean_intertidal","text":"trophic network 107 species present  intertidal zone central Chile. food web reconstructed Kefi et al. 2015","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/chilean_intertidal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The binaryfoodweb of the intertidal zone in central chile — chilean_intertidal","text":"","code":"chilean_intertidal"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/chilean_intertidal.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The binaryfoodweb of the intertidal zone in central chile — chilean_intertidal","text":"network","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/chilean_intertidal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The binaryfoodweb of the intertidal zone in central chile — chilean_intertidal","text":"Kefi, Sonia, Eric L. Berlow, Evie . Wieters, Lucas N. Joppa, Spencer . Wood, Ulrich Brose, Sergio . Navarrete. \"Network structure beyond food webs: mapping non trophic trophic interactions Chilean rocky shores.\" Ecology 96, . 1 (2015.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/chilean_potential.html","id":null,"dir":"Reference","previous_headings":"","what":"The potential foodweb of the intertidal zone in central chile — chilean_potential","title":"The potential foodweb of the intertidal zone in central chile — chilean_potential","text":"trophic network 107 species present  intertidal zone central Chile. food web reconstructed Kefi et al. 2015","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/chilean_potential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The potential foodweb of the intertidal zone in central chile — chilean_potential","text":"","code":"chilean_potential"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/chilean_potential.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The potential foodweb of the intertidal zone in central chile — chilean_potential","text":"network","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/chilean_weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"The weighted foodweb of the intertidal zone in central chile — chilean_weighted","title":"The weighted foodweb of the intertidal zone in central chile — chilean_weighted","text":"trophic network 107 species present  intertidal zone central Chile. food web reconstructed Kefi et al. 2015","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/chilean_weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The weighted foodweb of the intertidal zone in central chile — chilean_weighted","text":"","code":"chilean_weighted"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/chilean_weighted.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The weighted foodweb of the intertidal zone in central chile — chilean_weighted","text":"network","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/chilean_weighted.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The weighted foodweb of the intertidal zone in central chile — chilean_weighted","text":"Kefi, Sonia, Eric L. Berlow, Evie . Wieters, Lucas N. Joppa, Spencer . Wood, Ulrich Brose, Sergio . Navarrete. \"Network structure beyond food webs: mapping non trophic trophic interactions Chilean rocky shores.\" Ecology 96, . 1 (2015.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/dist.html","id":null,"dir":"Reference","previous_headings":"","what":"A toymodel distance matrix — dist","title":"A toymodel distance matrix — dist","text":"distance matrix used demonstration rewiring capabilities","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A toymodel distance matrix — dist","text":"","code":"dist"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/dist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A toymodel distance matrix — dist","text":"distance matrix","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/mutual.html","id":null,"dir":"Reference","previous_headings":"","what":"A mutualistic web — mutual","title":"A mutualistic web — mutual","text":"network 10 species (5 basal 5 higher order)","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/mutual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A mutualistic web — mutual","text":"","code":"mutual"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/mutual.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A mutualistic web — mutual","text":"network","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/net.html","id":null,"dir":"Reference","previous_headings":"","what":"A toymodel trophic network — net","title":"A toymodel trophic network — net","text":"trophic network 10 species first four species primery producters","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A toymodel trophic network — net","text":"","code":"net"},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/reference/net.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A toymodel trophic network — net","text":"network","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/news/index.html","id":"networkextinction-011","dir":"Changelog","previous_headings":"","what":"NetworkExtinction 0.1.1","title":"NetworkExtinction 0.1.1","text":"CRAN release: 2019-10-27 Added NEWS.md file track changes package.","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/news/index.html","id":"networkextinction-012","dir":"Changelog","previous_headings":"","what":"NetworkExtinction 0.1.2","title":"NetworkExtinction 0.1.2","text":"Fixed parameters degree_distribution, intercept power law present Fixed degree_distribution select one model per family Eliminated Truncated distribution degree_distribution since didn’t theoretical support Eliminated name argument degree_distribution","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/news/index.html","id":"networkextinction-013","dir":"Changelog","previous_headings":"","what":"NetworkExtinction 0.1.3","title":"NetworkExtinction 0.1.3","text":"Added parallel processing RandomExtinctions","code":""},{"path":"https://derek-corcoran-barrios.github.io/NetworkExtinction/news/index.html","id":"networkextinction-021","dir":"Changelog","previous_headings":"","what":"NetworkExtinction 0.2.1","title":"NetworkExtinction 0.2.1","text":"Change function name degree_distribution DegreeDistribution functions Mostconnected ExtinctionOrder now soft deprecated favour SimulateExtinctions Transformed ExtinctionOrder output unify Mostconnected output SimulateExtinctions common output","code":""}]
